```{r setup}
#| message: false
#| warning: false
#| include: false

library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(patchwork)
library(flextable)
list.files("r", full.names = TRUE, pattern = ".R") %>%
  lapply(source)
```

# Calibrate the model with forest inventory data {.unnumbered}

## Data

```{r}
data <- read.csv("data/derived_data/aggregated_data_v8.csv")
plot_info <- read.csv("data/raw_data/bioforest-plot-information.csv") |>
  select(site, plot, Year_of_harvest, Treatment)
sites_to_keep <- read.csv("data/derived_data/sites_to_keep.csv")

data <- read.csv("data/derived_data/aggregated_data_v8.csv") |>
  left_join(plot_info, by = join_by(Site == site, Plot == plot)) |>
  filter(Site %in% sites_to_keep$Site) |>
  filter(grepl("^agb", variable)) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  mutate(prod = agb_growth + agb_recr, mort = agb_mort, stocks = agb) |>
  select(!contains("agb")) |>
  pivot_longer(cols = c("stocks", "prod", "mort"), names_to = "variable") |>
  mutate(trec = Year - Year_of_harvest)
```

## Model

We used the following parameter bounds when calibrating the model.

```{r}
bounds <- data.frame(
  "theta_min" = 50,
  "theta_max" = 1000,
  "lambda_min" = 1e-2,
  "lambda_max" = 5,
  "alpha_min" = 0,
  "alpha_max" = 200,
  "delta_min" = 0,
  "delta_max" = 20,
  "tau_min" = 2,
  "tau_max" = 30,
  "omega_min" = 1e-3,
  "omega_max" = 0.5,
  "y0_min" = 10,
  "y0_max" = 1000
)
bounds |>
  pivot_longer(everything(), names_to = "parameter") |>
  separate(parameter, c("parameter", "bound")) |>
  pivot_wider(names_from = bound) |>
  flextable()
```

For now, we only calibrate the model with MBaiki and Paracou.

```{r}
data <- data |>
  filter(Site %in% c("Mbaiki", "Paracou"))
```

```{r}
data_rec <- data |>
  mutate(sitenum = as.numeric(as.factor(Site))) |>
  subset(Treatment == "Logging" & trec > 3) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  subset(!is.na(prod) & !is.na(mort)) |>
  mutate(plotnum = as.numeric(as.factor(paste(Site, Plot))))
data_old <- data |>
  mutate(sitenum = as.numeric(as.factor(Site))) |>
  subset(Treatment == "Control" | trec < 0) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  subset(!is.na(prod) & !is.na(mort))
```

```{r fit_flux_model}
#| eval: false
ind_rec <- data_rec |>
  select(Site, Plot, sitenum, plotnum) |>
  unique() |>
  arrange(plotnum)

mdata_all <- list(
  n_equ = nrow(data_old),
  n_log = nrow(data_rec),
  s = max(data_old$sitenum),
  p_log = max(data_rec$plotnum),
  y_equ = data_old$stocks,
  in_equ = data_old$prod,
  out_equ = data_old$mort,
  y_log = data_rec$stocks,
  in_log = data_rec$prod,
  out_log = data_rec$mort,
  time = data_rec$trec,
  site_equ = data_old$sitenum,
  site_log = data_rec$sitenum,
  plot_log = data_rec$plotnum,
  site_plot = ind_rec$sitenum,
  theta_bounds = c(bounds$theta_min, bounds$theta_max),
  lambda_bounds = c(bounds$lambda_min, bounds$lambda_max),
  alpha_bounds = c(bounds$alpha_min, bounds$alpha_max),
  delta_bounds = c(bounds$delta_min, bounds$delta_max),
  tau_bounds = c(bounds$tau_min, bounds$tau_max),
  omega_bounds = c(bounds$omega_min, bounds$omega_max),
  y0_bounds = c(bounds$y0_min, bounds$y0_max)
)
sample_model("flux_all", mdata_all)
```

The resulting Stan fit summary is presented below.

```{r}
#| message: false
#| warning: false

fit_flux_all <- as_cmdstan_fit(
  list.files("chains/flux_all/", full.names = TRUE)
)
fit_flux_all
mcmc_trace(fit_flux_all$draws(variables = c("lp__")))
```


The main parameter values are consistent with our expectations.

```{r}
c("mu_delta", "mu_lambda") |>
  fit_flux_all$summary()
c("theta_s") |>
  fit_flux_all$summary()
c("omega_s") |>
  fit_flux_all$summary()
```

The goodness of fit is satisfactory.

```{r}
#| warning: false
#| fig-cap: "Predicted vs observed values."
#| fig-width: 8
#| fig-height: 3

pred_data <- data_rec |>
  select(-plotnum) |>
  mutate(
    stocks = fit_flux_logged$summary(c("mu_stocks"), median)$median,
    prod = fit_flux_logged$summary(c("mu_influx"), median)$median,
    mort = fit_flux_logged$summary(c("mu_outflux"), median)$median,
    val = "pred",
    type = "rec"
  ) |>
  rbind(mutate(
    data_old,
    stocks = fit_flux_control$summary(c("mu_stocks"), median)$median,
    prod = fit_flux_control$summary(c("mu_influx"), median)$median,
    mort = fit_flux_control$summary(c("mu_outflux"), median)$median,
    val = "pred",
    type = "old"
  ))

obs_data <- data_rec |>
  mutate(
    val = "obs",
    type = "rec"
  ) |>
  select(-plotnum) |>
  rbind(mutate(
    data_old,
    val = "obs",
    type = "old"
  ))

pov_data <- rbind(pred_data, obs_data) |>
  pivot_longer(cols = c(stocks, prod, mort), names_to = "variable") |>
  pivot_wider(names_from = val, values_from = value)

df_rmse <- pov_data |>
  group_by(variable) |>
  summarise(rmse = sqrt(mean((pred - obs)^2)))

labs <- c(stocks = "BA stocks", prod = "BA productivity", mort = "BA mortality")

pov_data |>
  ggplot(aes(pred, obs)) +
  geom_point(alpha = 0.25, aes(col = type)) +
  geom_abline(col = "red", linetype = "dashed") +
  geom_text(
    data = df_rmse,
    aes(
      x = -Inf, y = Inf, hjust = -0.1, vjust = 1,
      label = paste("RMSE =", round(rmse, 2))
    )
  ) +
  theme_bw() +
  xlab("Predicted") +
  ylab("Observed") +
  facet_wrap(~variable, scales = "free", labeller = labeller(variable = labs))
```

### Visualising the trajectories

The predicted flux and stocks trajectories look consistent with the data.

```{r}
#| fig-width: 8
#| fig-height: 8
#| fig-cap: "Predicted trajectories in Paracou and Mbaiki."

labs_type <- c(old = "Old-growth and pre-logging", rec = "Logged")

pov_data |>
  subset(variable == "stocks" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  ylab(expression("Basal area [" ~ m^2 ~ ha^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )

pov_data |>
  subset(variable == "prod" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  geom_smooth() +
  ylab(expression("Basal area productivity [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )

pov_data |>
  subset(variable == "mort" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  subset(obs < 2.5) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  geom_smooth() +
  ylab(expression("Basal area mortality [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )
```
