```{r setup}
#| message: false
#| warning: false
#| include: false

library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(patchwork)
library(flextable)
list.files("r", full.names = TRUE, pattern = ".R") %>%
  lapply(source)
```

# Calibrate the model with forest inventory data {.unnumbered}

## Data

```{r}
control_string <- "unlogged|to be logged|old-growth|control|natural"
silv_string <- "treatment|devital|thinning"

plot_info <-
  read.csv("data/raw_data/bioforest-plot-information.csv") |>
  mutate(site = ifelse(site == "BAFOG", "Bafog", site)) |>
  mutate(site = ifelse(site == "Montagne_tortue", "Montagne_Tortue", site)) |>
  # harmonize treatment information as logging and silvicultural treatments
  mutate(
    Treatment = ifelse(Treatment != "", Treatment, NA),
    logging = !grepl(control_string, tolower(Treatment)),
    silv_treat = grepl(silv_string, tolower(Treatment)),
    year_log = ifelse(site == "Paracou", 1986,
      Year_of_harvest |> substr(1, 4) |> as.numeric() # nolint
    )
  ) |>
  select(site, plot, logging, silv_treat, year_log)

data <- read.csv("data/derived_data/aggregated_data.csv") |>
  subset(Site %in% c(
    "Lesong", "Mbaiki", "Misiones", "Moju", "Paracou",
    "Sg Lalang", "Ulu Muda"
  )) |>
  subset(variable %in% c("ba_mort", "ba_growth", "ba_recr", "ba")) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  mutate(prod = ba_growth + ba_recr, mort = ba_mort, stocks = ba) |>
  select(!contains("ba")) |>
  pivot_longer(cols = c("stocks", "prod", "mort"), names_to = "variable") |>
  merge(plot_info, by.x = c("Site", "Plot"), by.y = c("site", "plot")) |>
  mutate(trec = Year - year_log) |>
  subset(!logging | !is.na(year_log))
```

## Model

We used the following parameter bounds when calibrating the model.

```{r}
bounds <- data.frame(
  "muthetaInf_min" = 0.01,
  "muthetaInf_max" = 1,
  "thetaInf_min" = 0.01,
  "thetaInf_max" = 5,
  "lambda_min" = 1e-3,
  "lambda_max" = 1,
  "dist_min" = 1e-2,
  "dist_max" = 2,
  "delta_min" = 0,
  "delta_max" = 1,
  "tau_min" = 2,
  "tau_max" = 30,
  "omega_min" = 1e-3,
  "omega_max" = 0.5,
  "y0_min" = 1,
  "y0_max" = 30
)
bounds |>
  pivot_longer(everything(), names_to = "parameter") |>
  separate(parameter, c("parameter", "bound")) |>
  pivot_wider(names_from = bound) |>
  flextable()
```

```{r}
data_rec <- data |>
  mutate(sitenum = as.numeric(as.factor(Site))) |>
  subset(logging & trec > 3) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  subset(!is.na(prod) & !is.na(mort)) |>
  mutate(plotnum = as.numeric(as.factor(paste(Site, Plot))))
data_old <- data |>
  mutate(sitenum = as.numeric(as.factor(Site))) |>
  subset(!logging | trec < 0) |>
  pivot_wider(names_from = "variable", values_from = "value") |>
  subset(!is.na(prod) & !is.na(mort))
```

```{r fit_flux_model_control}
#| eval: false
ind_rec <- data_rec |>
  select(Site, Plot, sitenum, plotnum) |>
  unique() |>
  arrange(plotnum)

mdata_control <- list(
  n = nrow(data_old),
  s = max(data_rec$sitenum),
  stocks = data_old$stocks,
  influx = data_old$prod,
  outflux = data_old$mort,
  site = data_old$sitenum,
  mu_thetaInf_bounds = c(
    bounds$muthetaInf_min,
    bounds$muthetaInf_max
  ),
  thetaInf_bounds = c(
    bounds$thetaInf_min,
    bounds$thetaInf_max
  ),
  omega_bounds = c(
    bounds$omega_min,
    bounds$omega_max
  )
)

sample_model("flux_control", mdata_control)
```

The resulting Stan fit summary is presented below.

```{r}
#| message: false
#| warning: false

fit_flux_control <- as_cmdstan_fit(
  list.files("chains/flux_control/", full.names = TRUE)
)
fit_flux_control
mcmc_trace(fit_flux_control$draws(variables = c("lp__")))
```

```{r fit_flux_model_logged}
#| eval: false

mdata_logged <- list(
  n = nrow(data_rec),
  s = max(data_rec$sitenum),
  p = max(data_rec$plotnum),
  stocks = data_rec$stocks,
  influx = data_rec$prod,
  outflux = data_rec$mort,
  time = data_rec$trec,
  site = data_rec$sitenum,
  plot = data_rec$plotnum,
  site_plot = ind_rec$sitenum,
  mu_thetaInf_s = fit_flux_control$summary(c("thetaInf_s"), mean)$mean,
  sigma_thetaInf = fit_flux_control$summary(c("sigma_thetaInf"), mean)$mean,
  mu_omega_s = fit_flux_control$summary(c("omega_s"), mean)$mean,
  sigma_omega = fit_flux_control$summary(c("sigma_omega"), mean)$mean,
  thetaInf_bounds = c(
    bounds$thetaInf_min,
    bounds$thetaInf_max
  ),
  lambda_bounds = c(
    bounds$lambda_min,
    bounds$lambda_max
  ),
  dist_bounds = c(
    bounds$dist_min,
    bounds$dist_max
  ),
  delta_bounds = c(
    bounds$delta_min,
    bounds$delta_max
  ),
  tau_bounds = c(
    bounds$tau_min,
    bounds$tau_max
  ),
  omega_bounds = c(
    bounds$omega_min,
    bounds$omega_max
  ),
  y0_bounds = c(
    bounds$y0_min,
    bounds$y0_max
  )
)

sample_model("flux_logged", mdata_logged)
```

The resulting Stan fit summary is presented below.

```{r}
#| message: false
#| warning: false

fit_flux_logged <- as_cmdstan_fit(
  list.files("chains/flux_logged/", full.names = TRUE)
)
fit_flux_logged
mcmc_trace(fit_flux_logged$draws(variables = c("lp__")))
```

The main parameter values are consistent with our expectations.

```{r}
c("mu_delta", "mu_lambda") |>
  fit_flux_logged$summary()
c("thetaInf_s") |>
  fit_flux_logged$summary()
c("omega_s") |>
  fit_flux_logged$summary()
```

The goodness of fit is satisfactory.

```{r}
#| warning: false
#| fig-cap: "Predicted vs observed values."
#| fig-width: 8
#| fig-height: 3

pred_data <- data_rec |>
  select(-plotnum) |>
  mutate(
    stocks = fit_flux_logged$summary(c("mu_stocks"), median)$median,
    prod = fit_flux_logged$summary(c("mu_influx"), median)$median,
    mort = fit_flux_logged$summary(c("mu_outflux"), median)$median,
    val = "pred",
    type = "rec"
  ) |>
  rbind(mutate(
    data_old,
    stocks = fit_flux_control$summary(c("mu_stocks"), median)$median,
    prod = fit_flux_control$summary(c("mu_influx"), median)$median,
    mort = fit_flux_control$summary(c("mu_outflux"), median)$median,
    val = "pred",
    type = "old"
  ))

obs_data <- data_rec |>
  mutate(
    val = "obs",
    type = "rec"
  ) |>
  select(-plotnum) |>
  rbind(mutate(
    data_old,
    val = "obs",
    type = "old"
  ))

pov_data <- rbind(pred_data, obs_data) |>
  pivot_longer(cols = c(stocks, prod, mort), names_to = "variable") |>
  pivot_wider(names_from = val, values_from = value)

df_rmse <- pov_data |>
  group_by(variable) |>
  summarise(rmse = sqrt(mean((pred - obs)^2)))

labs <- c(stocks = "BA stocks", prod = "BA productivity", mort = "BA mortality")

pov_data |>
  ggplot(aes(pred, obs)) +
  geom_point(alpha = 0.25, aes(col = type)) +
  geom_abline(col = "red", linetype = "dashed") +
  geom_text(
    data = df_rmse,
    aes(
      x = -Inf, y = Inf, hjust = -0.1, vjust = 1,
      label = paste("RMSE =", round(rmse, 2))
    )
  ) +
  theme_bw() +
  xlab("Predicted") +
  ylab("Observed") +
  facet_wrap(~variable, scales = "free", labeller = labeller(variable = labs))
```

### Visualising the trajectories

The predicted flux and stocks trajectories look consistent with the data. 

```{r}
#| fig-width: 8
#| fig-height: 8
#| fig-cap: "Predicted trajectories in Paracou and Mbaiki."

labs_type <- c(old = "Old-growth and pre-logging", rec = "Logged")

pov_data |>
  subset(variable == "stocks" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  ylab(expression("Basal area [" ~ m^2 ~ ha^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )

pov_data |>
  subset(variable == "prod" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  geom_smooth() +
  ylab(expression("Basal area productivity [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )

pov_data |>
  subset(variable == "mort" & Site %in% c("Paracou", "Mbaiki", "Lesong")) |>
  subset(obs < 2.5) |>
  ggplot(aes(Year, y = obs)) +
  geom_point(aes(group = Plot, col = Plot)) +
  geom_line(aes(group = Plot, col = Plot, y = pred)) +
  geom_smooth() +
  ylab(expression("Basal area mortality [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  theme_bw() +
  facet_grid(Site ~ type,
    scales = "free",
    labeller = labeller(type = labs_type)
  )
```


### Notes

#### Inconsistency between productivity - mortality and change in BA in the observed data  

There is an inconsistency between annual changes in BA and flux values (especially in Mbaiki) that needs to be resolved in the data aggregation step.

```{r}
#| warning: false

obs_data |>
  subset(logging & trec > 3) |>
  arrange(Site, Plot, Year) |>
  group_by(Site, Plot) |>
  mutate(
    diff_stock = c(NA, diff(stocks) / diff(Year)),
    diff_flux = prod - mort
  ) |>
  ggplot(aes(diff_stock, diff_flux)) +
  geom_abline(lty = 2) +
  xlab(expression("Productivity - mortality [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  ylab(expression("Changes in BA [" ~ m^2 ~ ha^-1 ~ yr^-1 ~ "]")) +
  geom_point(alpha = 0.2, aes(col = Site)) +
  theme_classic()
```
